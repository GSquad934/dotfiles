# Common aliases for all shells
#

# Log symmetric session key during TLS traffic (useful to decrypt SSL traffic)
# Uncomment to enable it
#export SSLKEYLOGFILE=~/sslkeylog.log

# Define custom PATH
if [[ -d "$SCRIPTS" ]]; then
	export PATH="$SCRIPTS":"$PATH"
fi
if [[ -d "$SOURCES/bin" ]]; then
	export PATH="$SOURCES/bin":"$PATH"
fi
if [[ -d "$REPOS/bin" ]]; then
	export PATH="$REPOS/bin":"$PATH"
fi

# macOS specific PATH
if [[ "$OSTYPE" == "darwin"* ]] && type brew > /dev/null 2>&1; then

    # Homebrew PATH
    export PATH=/usr/local/sbin:$PATH

    # Brew Curl
    if [[ -d /usr/local/opt/curl ]]; then
    	export PATH=/usr/local/opt/curl/bin:$PATH
    fi

    # Brew OpenSSL
    if [[ -d /usr/local/opt/openssl/bin/ ]]; then
    	export PATH=/usr/local/opt/openssl/bin/:$PATH
    fi

    # Python
    if [[ -d "$HOME"/Library/Python/3.7/bin ]]; then
    	export PATH=$HOME/Library/Python/3.7/bin:$PATH
    fi
fi

# Remove any duplicates from PATH environment variable
PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"

# Auto-start SSH agent
if [[ -d "$HOME"/.ssh ]]; then
	if [[ ! -S ~/.ssh/ssh_auth_sock ]]; then
  		eval `ssh-agent`
  		ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
	fi
	export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
	ssh-add -l > /dev/null || ssh-add
fi

# Define colors when displaying files on BSD
if [[ "$OSTYPE" == "darwin"* ]] || [[ "$OSTYPE" == *"bsd"* ]] || [[ "$OSTYPE" == *"BSD"* ]]; then
	export LSCOLORS='CxfxcxdxbxGxDxabagacad'
fi

# Define colors when displaying files on Linux
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	export LS_COLORS='di=1;32:ln=35:so=32:pi=33:ex=31:bd=1;36:cd=1;33:su=30;41:sg=30;46:tw=30;42:ow=30;43'
fi

# Allow files overwriting with >
set +o noclobber

# Colorize man pages
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

# History configuration
HISTSIZE=1000000
SAVEHIST=1000000
if [[ "$SHELL" == "/bin/bash" ]] || [[ "$SHELL" == "/bin/zsh" ]]; then
	HISTFILE="$XDG_CACHE_HOME/shell_history"
fi

# If NVIM is installed, set it as default editor. Otherwise, fallback to vim or vi
if type nvim > /dev/null 2>&1; then
	export EDITOR="nvim"
	export VISUAL="nvim"
elif type vim > /dev/null 2>&1; then
	export EDITOR="vim"
	export VISUAL="vim"
elif type vi > /dev/null 2>&1; then
	export EDITOR="vi"
	export VISUAL="vi"
fi

# Disable 'less' history file
export LESSHISTFILE="-"

#---------------
# XDG Base Directory
#---------------

# Set the location where user-specific configurations should be written
export XDG_CONFIG_HOME="$HOME"/.config

# Set the location where user-specific non-essential data (cached) should be written
export XDG_CACHE_HOME="$HOME"/.cache

# Set the location where user-specific data files should be written
export XDG_DATA_HOME="$HOME"/.local/share

# Weechat
if type weechat > /dev/null 2>&1; then
	export WEECHAT_HOME="$XDG_CONFIG_HOME"/weechat
fi

# Docker
if type docker > /dev/null 2>&1; then
	export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
fi

# 'wget'
if type wget > /dev/null 2>&1; then
	export WGETRC="$XDG_CONFIG_HOME"/wget/wgetrc
fi

# GNU screen
if type screen > /dev/null 2>&1; then
	export SCREENRC="$XDG_CONFIG_HOME"/screen/screenrc
fi

#---------------
# Environment Variables
#---------------

# Configure terminal
if [[ -z "$TMUX" ]]; then
	export TERM=xterm-256color
fi

# Configure the default terminal emulator
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type alacritty > /dev/null 2>&1; then
		export TERMINAL="alacritty"
	elif type kitty > /dev/null 2>&1; then
		export TERMINAL="kitty"
	elif type st > /dev/null 2>&1; then
		export TERMINAL="st"
	fi
fi

# Configure the default launcher menu
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type rofi > /dev/null 2>&1; then
		export LMENU="rofi -show combi"
	elif type dmenu > /dev/null 2>&1; then
		export LMENU="dmenu_run"
	fi
fi

# Configure the default graphical Web browser
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type brave > /dev/null 2>&1; then
		export BROWSER="brave"
	elif type chromium > /dev/null 2>&1; then
		export BROWSER="chromium"
	elif type firefox > /dev/null 2>&1; then
		export BROWSER="firefox"
	fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
	if [[ -d /Applications/Brave\ Browser.app ]]; then
		export BROWSER="/Applications/Brave*Browser.app/Contents/MacOS/Brave*Browser"
	elif [[ -d /Applications/Firefox.app ]]; then
		export BROWSER="/Applications/Firefox.app/Contents/MacOS/firefox"
	elif [[ -d /Applications/Safari.app ]]; then
		export BROWSER="/Applications/Safari.app/Contents/MacOS/Safari"
	fi
fi

# Configure the default text Web browser
if type w3m > /dev/null 2>&1; then
	export BROWSERCLI="w3m"
elif type lynx > /dev/null 2>&1; then
	export BROWSERCLI="lynx"
elif type links > /dev/null 2>&1; then
	export BROWSERCLI="links"
fi

# Configure the default music player
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type mocp > /dev/null 2>&1; then
		export MUSICPLAYER="mocp -M /home/gaetan/.config/moc -O MOCDir=/home/gaetan/.config/moc"
	elif type mpv > /dev/null 2>&1; then
		export MUSICPLAYER="mpv"
	elif type vlc > /dev/null 2>&1; then
		export MUSICPLAYER="vlc"
	fi
fi

# Configure the default file manager
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type vifm > /dev/null 2>&1; then
		export FILEMANAGER="vifm"
	elif type pcmanfm > /dev/null 2>&1; then
		export FILEMANAGER="pcmanfm"
	elif type vlc > /dev/null 2>&1; then
		export FILEMANAGER="thunar"
	fi
fi

# Configure the default system monitoring software
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type htop > /dev/null 2>&1; then
		export SYSMONITOR="htop"
	elif type bpytop > /dev/null 2>&1; then
		export SYSMONITOR="bpytop"
	fi
fi

# Configure the default IRC client
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type weechat > /dev/null 2>&1; then
		export IRCCLIENT="weechat"
	elif type hexchat > /dev/null 2>&1; then
		export IRCCLIENT="hexchat"
	fi
fi

# Configure the default RSS reader
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type newsboat > /dev/null 2>&1; then
		export RSSREADER="newsboat"
	fi
fi

# Configure the default Web wrapper/aggregator
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type ferdi > /dev/null 2>&1; then
		export WEBWRAPPER="ferdi"
	elif type rambox > /dev/null 2>&1; then
		export WEBWRAPPER="rambox"
	fi
fi

# Configure the default screenshot utility
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type flameshot > /dev/null 2>&1; then
		export SCROTBIN="screenshot"
	fi
fi

# Configure the default sound mixer
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if type pulsemixer > /dev/null 2>&1; then
		export AUDIOMIXER="pulsemixer"
	elif type alsamixer > /dev/null 2>&1; then
		export AUDIOMIXER="alsamixer"
	fi
fi

# Configure locales
export LC_ALL=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_CTYPE=UTF-8

# Configure keyboard repeat rate
if [[ "$OSTYPE" == "linux-gnu" ]] && type xset > /dev/null 2>&1; then
	xset r rate 200 70 > /dev/null 2>&1
fi

# If a WM is installed on Arch Linux, source the X11 profile
if [[ ! -h /etc/arch-release ]] && [[ -f "$HOME"/.xinitrc ]] > /dev/null 2>&1; then
	source "$XDG_CONFIG_HOME"/X11/xprofile
fi

# Auto-start Tmux session
if [[ -z "$SESSION" ]] && type tmux > /dev/null 2>&1 && [[ -z "$TMUX" ]]; then
	if [[ -z "$SSH_CLIENT" ]] || [[ -z "$SSH_TTY" ]]; then
    	if [[ ! -d "$XDG_CONFIG_HOME"/tmux/plugins/tpm ]]; then
			echo -e "Installing TMUX Plugin Manager..."
    		git clone https://github.com/tmux-plugins/tpm "$XDG_CONFIG_HOME"/tmux/plugins/tpm > /dev/null 2>&1
			echo -e "TMUX Plugin Manager installed"
			echo -e
		fi
    	if [[ ! -d "$XDG_CONFIG_HOME"/tmux/plugins/tmux-sensible ]]; then
			echo -e "Installing TMUX plugins..."
    		"$XDG_CONFIG_HOME"/tmux/plugins/tpm/bin/install_plugins > /dev/null 2>&1
			echo -e "TMUX plugins installed"
			echo -e
    	fi
    fi
	tmux attach-session -t "$USER"0 || tmux new-session -s "$USER"0
fi

# Check if dotfiles are up-to-date
# DISABLED due to delays when proxy are required or when GitHub is blocked
# if [[ -d "$DOTFILES"/.git ]]; then
# 	git -C "$DOTFILES" fetch > /dev/null 2>&1
# 	alias dotrefresh="git -C $DOTFILES pull"
# 	if git -C "$DOTFILES" status -sb | grep behind > /dev/null 2>&1; then
# 		printf '%s\n' "An update for your dotfiles is available. Please run \"dotrefresh\" to update"
# 	fi
# fi
